/* 문제
정수 X에 사용할 수 있는 연산은 다음과 같이 세 가지 이다.

X가 3으로 나누어 떨어지면, 3으로 나눈다.
X가 2로 나누어 떨어지면, 2로 나눈다.
1을 뺀다.
정수 N이 주어졌을 때, 위와 같은 연산 세 개를 적절히 사용해서 1을 만들려고 한다. 연산을 사용하는 횟수의 최솟값을 출력하시오.

입력
첫째 줄에 1보다 크거나 같고, 106보다 작거나 같은 정수 N이 주어진다.

출력
첫째 줄에 연산을 하는 횟수의 최솟값을 출력한다. 
*/

def min_operations_to_one(n):
    # 1. DP 테이블 생성: 최소 연산 횟수를 저장할 리스트
    dp = [0] * (n + 1)  # dp[i]는 i를 1로 만드는 데 필요한 최소 연산 횟수

    # 2. DP 계산
    for i in range(2, n + 1):
        # 2.1. 기본적으로 이전 숫자에서 1을 빼는 연산
        dp[i] = dp[i - 1] + 1

        # 2.2. i가 2로 나누어 떨어질 경우, 2로 나누는 연산과 비교
        if i % 2 == 0:
            dp[i] = min(dp[i], dp[i // 2] + 1)

        # 2.3. i가 3으로 나누어 떨어질 경우, 3으로 나누는 연산과 비교
        if i % 3 == 0:
            dp[i] = min(dp[i], dp[i // 3] + 1)

    # 3. n을 1로 만드는 최소 연산 횟수 반환
    return dp[n]

# 입력 받기
n = int(input())
# 결과 출력
print(min_operations_to_one(n))
